{{- if not .Values.application.initializeCommand -}}
apiVersion: {{ default "extensions/v1beta1" .Values.deploymentApiVersion }}
kind: Deployment
metadata:
  name: {{ template "trackableworkername" . }}
  annotations:
    {{ if .Values.gitlab.app }}app.gitlab.com/app: {{ .Values.gitlab.app | quote }}{{ end }}
    {{ if .Values.gitlab.env }}app.gitlab.com/env: {{ .Values.gitlab.env | quote }}{{ end }}
  labels:
    app: {{ template "appname" . }}
    track: "{{ .Values.application.track }}"
    tier: "{{ .Values.worker.tier }}"
    chart: "{{ .Chart.Name }}-{{ .Chart.Version | replace "+" "_" }}"
    release: {{ .Release.Name }}
    heritage: {{ .Release.Service }}
spec:
{{- if or .Values.enableSelector (eq (default "extensions/v1beta1" .Values.deploymentApiVersion) "apps/v1") }}
  selector:
    matchLabels:
      app: {{ template "appname" . }}
      track: "{{ .Values.application.track }}"
      tier: "{{ .Values.worker.tier }}"
      release: {{ .Release.Name }}
{{- end }}
  replicas: {{ .Values.worker.replicaCount }}
{{- if .Values.strategyType }}
  strategy:
    type: {{ .Values.strategyType | quote }}
{{- end }}
  template:
    metadata:
      annotations:
        checksum/application-secrets: "{{ .Values.application.secretChecksum }}"
        {{ if .Values.gitlab.app }}app.gitlab.com/app: {{ .Values.gitlab.app | quote }}{{ end }}
        {{ if .Values.gitlab.env }}app.gitlab.com/env: {{ .Values.gitlab.env | quote }}{{ end }}
{{- if .Values.podAnnotations }}
{{ toYaml .Values.podAnnotations | indent 8 }}
{{- end }}
      labels:
        app: {{ template "appname" . }}
        track: "{{ .Values.application.track }}"
        tier: "{{ .Values.worker.tier }}"
        release: {{ .Release.Name }}
    spec:
      imagePullSecrets:
{{ toYaml .Values.image.secrets | indent 10 }}
      containers:
      - name: {{ .Chart.Name }}
        image: "{{ .Values.image.repository }}:{{ .Values.image.tag }}"
        imagePullPolicy: {{ .Values.image.pullPolicy }}
        args: ["/app/tixter-app", "--worker"]
        {{- if .Values.application.secretName }}
        envFrom:
        - secretRef:
            name: {{ .Values.application.secretName }}
        {{- end }}
        env:
{{- if .Values.postgresql.managed }}
        - name: POSTGRES_USER
          valueFrom:
            secretKeyRef:
              name: app-postgres
              key: username
        - name: POSTGRES_PASSWORD
          valueFrom:
            secretKeyRef:
              name: app-postgres
              key: password
        - name: POSTGRES_HOST
          valueFrom:
            secretKeyRef:
              name: app-postgres
              key: privateIP
{{- end }}
        - name: DATABASE_URL
          value: {{ .Values.application.database_url | quote }}
        - name: GITLAB_ENVIRONMENT_NAME
          value: {{ .Values.gitlab.envName | quote }}
        - name: GITLAB_ENVIRONMENT_URL
          value: {{ .Values.gitlab.envURL | quote }}
        ports:
        - name: "{{ .Values.service.name }}"
          containerPort: {{ .Values.service.internalPort }}
        livenessProbe:
{{- if eq .Values.worker.livenessProbe.probeType "httpGet" }}
          httpGet:
            path: {{ .Values.worker.livenessProbe.path }}
            scheme: {{ .Values.worker.livenessProbe.scheme }}
            port: {{ .Values.service.internalPort }}
{{- else if eq .Values.worker.livenessProbe.probeType "tcpSocket" }}
          tcpSocket:
            port: {{ .Values.service.internalPort }}
{{- else if eq .Values.worker.livenessProbe.probeType "exec" }}
          exec:
            command:
{{ toYaml .Values.worker.livenessProbe.command | indent 14 }}
{{- end }}
          initialDelaySeconds: {{ .Values.worker.livenessProbe.initialDelaySeconds }}
          timeoutSeconds: {{ .Values.worker.livenessProbe.timeoutSeconds }}
          periodSeconds: {{ .Values.worker.livenessProbe.periodSeconds }}
        readinessProbe:
{{- if eq .Values.worker.readinessProbe.probeType "httpGet" }}
          httpGet:
            path: {{ .Values.worker.readinessProbe.path }}
            scheme: {{ .Values.worker.readinessProbe.scheme }}
            port: {{ .Values.service.internalPort }}
{{- else if eq .Values.worker.readinessProbe.probeType "tcpSocket" }}
          tcpSocket:
            port: {{ .Values.service.internalPort }}
{{- else if eq .Values.worker.readinessProbe.probeType "exec" }}
          exec:
            command:
{{ toYaml .Values.worker.readinessProbe.command | indent 14 }}
{{- end }}
          initialDelaySeconds: {{ .Values.worker.readinessProbe.initialDelaySeconds }}
          timeoutSeconds: {{ .Values.worker.readinessProbe.timeoutSeconds }}
          periodSeconds: {{ .Values.worker.readinessProbe.periodSeconds }}
        resources:
{{ toYaml .Values.resources | indent 12 }}
{{- end -}}
